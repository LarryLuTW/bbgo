// Code generated by "requestgen -method GET -url v2/rewards/:path_type -type GetRewardsOfTypeRequest -responseType []Reward"; DO NOT EDIT.

package max

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (g *GetRewardsOfTypeRequest) From(from int64) *GetRewardsOfTypeRequest {
	g.from = &from
	return g
}

func (g *GetRewardsOfTypeRequest) To(to int64) *GetRewardsOfTypeRequest {
	g.to = &to
	return g
}

func (g *GetRewardsOfTypeRequest) Page(page int64) *GetRewardsOfTypeRequest {
	g.page = &page
	return g
}

func (g *GetRewardsOfTypeRequest) Limit(limit int64) *GetRewardsOfTypeRequest {
	g.limit = &limit
	return g
}

func (g *GetRewardsOfTypeRequest) Offset(offset int64) *GetRewardsOfTypeRequest {
	g.offset = &offset
	return g
}

func (g *GetRewardsOfTypeRequest) PathType(pathType RewardType) *GetRewardsOfTypeRequest {
	g.pathType = &pathType
	return g
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (g *GetRewardsOfTypeRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (g *GetRewardsOfTypeRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check from field -> json key from
	if g.from != nil {
		from := *g.from

		// TEMPLATE check-valid-values
		switch from {
		case timeOffset, reqCount:
			params["from"] = from

		default:
			return nil, fmt.Errorf("from value %v is invalid", from)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of from
		params["from"] = from
	} else {
	}
	// check to field -> json key to
	if g.to != nil {
		to := *g.to

		// TEMPLATE check-valid-values
		switch to {
		case timeOffset, reqCount:
			params["to"] = to

		default:
			return nil, fmt.Errorf("to value %v is invalid", to)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of to
		params["to"] = to
	} else {
	}
	// check page field -> json key page
	if g.page != nil {
		page := *g.page

		// TEMPLATE check-valid-values
		switch page {
		case timeOffset, reqCount:
			params["page"] = page

		default:
			return nil, fmt.Errorf("page value %v is invalid", page)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of page
		params["page"] = page
	} else {
	}
	// check limit field -> json key limit
	if g.limit != nil {
		limit := *g.limit

		// TEMPLATE check-valid-values
		switch limit {
		case timeOffset, reqCount:
			params["limit"] = limit

		default:
			return nil, fmt.Errorf("limit value %v is invalid", limit)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of limit
		params["limit"] = limit
	} else {
	}
	// check offset field -> json key offset
	if g.offset != nil {
		offset := *g.offset

		// TEMPLATE check-valid-values
		switch offset {
		case timeOffset, reqCount:
			params["offset"] = offset

		default:
			return nil, fmt.Errorf("offset value %v is invalid", offset)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of offset
		params["offset"] = offset
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (g *GetRewardsOfTypeRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if g.isVarSlice(_v) {
			g.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (g *GetRewardsOfTypeRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (g *GetRewardsOfTypeRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check pathType field -> json key path_type
	if g.pathType != nil {
		pathType := *g.pathType

		// assign parameter of pathType
		params["path_type"] = pathType

	}

	return params, nil
}

func (g *GetRewardsOfTypeRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (g *GetRewardsOfTypeRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (g *GetRewardsOfTypeRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (g *GetRewardsOfTypeRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := g.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (g *GetRewardsOfTypeRequest) Do(ctx context.Context) ([]Reward, error) {

	// empty params for GET operation
	var params interface{}
	query, err := g.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	apiURL := "v2/rewards/:path_type"
	slugs, err := g.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = g.applySlugsToUrl(apiURL, slugs)

	req, err := g.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := g.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Reward
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
